name: ci

on:
  push:
    branches: main
    paths:
      - 'Dockerfile'
      - 'scripts/latest_repo_tag.py'
      - 'scripts/container/*'
      - '.github/workflows/ci.yaml'
  workflow_dispatch:
    inputs:
      allow-push:
        description: 'Allow push to Docker Hub'
        required: true
        default: false
        type: boolean
      mpy-tag:
        description: 'Micropython tag to build'
        required: true
        default: 'latest'
        type: string

env:
  GH_REPO: ${{ github.repository }}
  MICROPYTHON_REPO: https://github.com/micropython/micropython.git
  DOCKERHUB_REPO: mattrmansfieldtx/micropython-builder
  DOCKER_PUSH_ALLOWED: ${{ github.event.inputs.allow-push == 'true' }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - mpy-port: unix
            mpy-board: standard
            image-target: unix
            image-name: unix
            os: ubuntu-22.04
            arch: amd64
          - mpy-port: rp2
            image-target: rp2
            image-name: rp2
            os: ubuntu-22.04
            arch: amd64
          - mpy-port: unix
            image-target: unix
            image-name: unix
            os: ubuntu-22.04-arm
            arch: arm64
          - mpy-port: rp2
            image-target: rp2
            image-name: rp2
            os: ubuntu-22.04-arm
            arch: arm64

    outputs:
      MICROPYTHON_VERSION: ${{ steps.get-mpy-version.outputs.MICROPYTHON_VERSION }}
      MICROPYTHON_LATEST_TAG: ${{ steps.get-mpy-version.outputs.MICROPYTHON_LATEST_TAG }}

    steps:
      - name: Platform Pair
        id: platform-pair
        run: |
          platform=linux/${{ matrix.arch }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Get micropython version
        id: get-mpy-version
        run: |
          ./scripts/latest_repo_tag.py -r ${{ env.MICROPYTHON_REPO }} > mpy_latest_tag.txt
          echo "MICROPYTHON_LATEST_TAG=$(cat mpy_latest_tag.txt)" >> $GITHUB_ENV
          echo "MICROPYTHON_LATEST_TAG=$(cat mpy_latest_tag.txt)" >> $GITHUB_OUTPUT
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event.inputs.mpy-tag }}" == "latest" ]]; then
            cp mpy_latest_tag.txt mpy_build_tag.txt
          else
            echo "${{ github.event.inputs.mpy-tag }}" > mpy_build_tag.txt
          fi
          echo "MICROPYTHON_VERSION=$(cat mpy_build_tag.txt)" >> $GITHUB_ENV
          echo "MICROPYTHON_VERSION=$(cat mpy_build_tag.txt)" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_REPO }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.get-mpy-version.outputs.MICROPYTHON_VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.get-mpy-version.outputs.MICROPYTHON_VERSION }}
            type=sha
          flavor: |
            latest=${{ steps.get-mpy-version.outputs.MICROPYTHON_LATEST_TAG == steps.get-mpy-version.outputs.MICROPYTHON_VERSION }}
            suffix=-${{ matrix.image-name }},onlatest=true

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          build-args: |
            MPY_PORT=${{ matrix.mpy-port }}
            MICROPYTHON_VERSION=${{ steps.get-mpy-version.outputs.MICROPYTHON_VERSION }}
            MICROPYTHON_REPO=${{ env.MICROPYTHON_REPO }}
          context: .
          file: Dockerfile
          target: ${{ matrix.image-target }}
          platforms: linux/${{ matrix.arch }}
          tags: ${{ env.DOCKERHUB_REPO }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.image-name }}-${{ steps.platform-pair.outputs.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        include:
          - mpy-port: unix
            image-target: unix
            image-name: unix
          - mpy-port: rp2
            image-target: rp2
            image-name: rp2
    env:
      MICROPYTHON_LATEST_TAG: ${{ needs.build.outputs.MICROPYTHON_LATEST_TAG }}
      MICROPYTHON_VERSION: ${{ needs.build.outputs.MICROPYTHON_VERSION }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.image-name }}-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_REPO }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.MICROPYTHON_VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.MICROPYTHON_VERSION }}
            type=sha
          flavor: |
            latest=${{ env.MICROPYTHON_LATEST_TAG == env.MICROPYTHON_VERSION }}
            suffix=-${{ matrix.image-name }},onlatest=true
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Format imagetools args
        id: imagetools-args
        shell: python
        run: |
          import json
          import os
          metadata = json.loads(os.environ['DOCKER_METADATA_OUTPUT_JSON'])
          args = [
              f'-t {tag}' for tag in metadata['tags']
          ]
          args.extend([
              f'--annotation "{anno}"' for anno in metadata['annotations']
          ])
          args_str = ' '.join(args)
          print(f'IMAGETOOLS_ARGS={args_str}')
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f'IMAGETOOLS_ARGS={args_str}', file=f)

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create --dry-run \
            ${{ steps.imagetools-args.outputs.IMAGETOOLS_ARGS }} \
            $(printf '${{ env.DOCKERHUB_REPO }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_REPO }}:${{ steps.meta.outputs.version }}
